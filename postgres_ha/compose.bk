services:
  master_db:
    container_name: master_db
    image: postgres:15-alpine
    ports:
      - "3000:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - ./config/master/init.sh:/docker-entrypoint-initdb.d/init.sh
    networks:
      - postgres_ha_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
      timeout: 5s

  # slave_db1:
  #   container_name: slave_db1
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_USER=${DB_USER}
  #     - POSTGRES_PASSWORD=${DB_PASSWORD}
  #     - POSTGRES_DB=${DB_NAME}
  #     - PGPASSWORD=${DB_PASSWORD}
  #     - REPLICATION_SLOT=slave_1
  #     - POSTGRES_INITDB_WALDIR=/var/lib/postgresql/main
  #   volumes:
  #     - ./config/slave/init.sh:/docker-entrypoint-initdb.d/init.sh
  #   networks:
  #     - postgres_ha_network

  slave_db2:
    container_name: slave_db2
    image: postgres:15-alpine
    ports:
      - "3001:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - REPLICATION_SLOT=slave_2
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/slave/entrypoint.sh:/entrypoint.sh
    networks:
      - postgres_ha_network
    command: >
      sh -c "rm -rf /var/lib/postgresql/data/* &&
      su-exec postgres pg_basebackup -h master_db -D /var/lib/postgresql/data -U cpm_db -P -v -R -X stream -C -S "slave_2" &&
      chown -R postgres:postgres /var/lib/postgresql/data &&
      chmod 0700 /var/lib/postgresql/data &&
      exec su-exec postgres postgres"
    depends_on:
      master_db:
        condition: service_healthy

networks:
  postgres_ha_network:
    driver: bridge

volumes:
  postgres_data:

# version: '3.8'

# services:
#   primary_db:
#     image: postgres:latest
#     container_name: primary_db
#     restart: always
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: mydatabase
#       PGDATA: /var/lib/postgresql/data
#     volumes:
#       - pg_master:/var/lib/postgresql/data
#       - ./config/master/init.sh:/docker-entrypoint-initdb.d/init.sh
#     ports:
#       - "3000:5432"
#     command: >
#       postgres -c wal_level=replica 
#                -c max_wal_senders=3 
#                -c wal_keep_size=64
#                -c hot_standby=on
#     healthcheck:
#       test: ["CMD", "pg_isready", "-U", "postgres"]
#       interval: 10s
#       retries: 5
#       timeout: 5s

#   replica_db:
#     image: postgres:latest
#     container_name: replica_db
#     restart: always
#     depends_on:
#       primary_db:
#         condition: service_healthy
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: mydatabase
#       PGDATA: /var/lib/postgresql/data
#       PGPASSWORD: mydatabase
#     volumes:
#       - pg_replica:/var/lib/postgresql/data
#     ports:
#       - "3001:5432"
#     command: >
#       bash -c "
#       rm -rf /var/lib/postgresql/data/* &&
#       pg_basebackup -h primary_db -D /var/lib/postgresql/data -U postgres -P -v -R -X stream -C -S replication_slot &&
#       postgres"
  
# volumes:
#   pg_master:
#   pg_replica:
